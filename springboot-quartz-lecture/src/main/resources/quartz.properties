# 将 Quartz 持久化方式修改为 jdbc
# job-store-type=jdbc
#================【scheduler】调度器配置==================
# 调度器实例名称（默认为quartzScheduler）
org.quartz.scheduler.instanceName=ClusterQuartz_Demo
# 调度器实例节点ID自动生成
org.quartz.scheduler.instanceId=AUTO
# 是否在Quartz执行一个job前使用UserTransaction
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false

#================【threadPool】线程池配置==================
#线程池的实现类（一般使用SimpleThreadPool即可满足需求）
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
#指定在线程池里面创建的线程是否是守护线程，设置后任务将不会执行
org.quartz.threadPool.makeThreadsDaemons=true
#指定线程池中的线程数，至少为1（无默认值）
org.quartz.threadPool.threadCount=10
#设置线程的优先级（最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5）
org.quartz.threadPool.threadPriority=5
#配置是否启动自动加载数据库内的定时任务，默认true
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true

#================【jobStore】持久化配置==================
# 是否是一个集群，是不是分布式的任务
org.quartz.jobStore.isClustered=true
# 集群检查周期，单位为毫秒，可以自定义缩短时间。当某一个节点宕机的时候，其他节点等待多久后开始执行任务
org.quartz.jobStore.clusterCheckinInterval=3000
# 单位为毫秒，集群中的节点退出后，再次检查进入的时间间隔
org.quartz.jobStore.misfireThreshold=60000
# 存储的事务管理类型
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# 使用的Delegate类型
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#JobDataMaps是否都为String类型
org.quartz.jobStore.useProperties=true
#数据表的前缀，默认QRTZ_
org.quartz.jobStore.tablePrefix = QRTZ_
# 数据库代理类
#org.quartz.dataSource.quartz_db.connectionProvider.class=org.cloud.xue.config.DruidConnectionProvider
org.quartz.jobStore.dataSource = quartz_db
org.quartz.dataSource.quartz_db.driver = com.mysql.cj.jdbc.Driver
org.quartz.dataSource.quartz_db.URL = jdbc:mysql://127.0.0.1:3306/quartz_db?useUnicode=true&characterEncoding=UTF-8
org.quartz.dataSource.quartz_db.user = root
org.quartz.dataSource.quartz_db.password = 123456
org.quartz.dataSource.quartz_db.maxConnections = 10